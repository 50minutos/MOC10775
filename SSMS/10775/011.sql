IF EXISTS (SELECT * FROM SYS.DATABASES WHERE NAME = 'DB')
BEGIN
	USE MASTER

	ALTER DATABASE DB
	SET SINGLE_USER
	WITH ROLLBACK IMMEDIATE

	DROP DATABASE DB
END

CREATE DATABASE DB
GO

USE DB

GO

CREATE SCHEMA PRODUCAO

GO

CREATE TABLE PRODUCAO.TIPO_PRODUTO
(
	COD_TIPO_PRODUTO INT IDENTITY PRIMARY KEY, 
	NOME_TIPO_PRODUTO VARCHAR(50) UNIQUE 
)

CREATE TABLE PRODUCAO.PRODUTO
(
	COD_PRODUTO INT IDENTITY PRIMARY KEY, 
	NOME_PRODUTO VARCHAR(50) UNIQUE, 
	PRECO_PRODUTO DEC(9, 2) CHECK (PRECO_PRODUTO >= 0),  
	COD_TIPO_PRODUTO INT REFERENCES PRODUCAO.TIPO_PRODUTO 
)

INSERT PRODUCAO.TIPO_PRODUTO
VALUES ('FERRAMENTA'), 
	('MATERIAL DE ESCRITÓRIO')

INSERT PRODUCAO.PRODUTO
VALUES ('SERROTE', 10, 1), 
	('MARTELO', 20, 1), 
	('MARRETA', 30, 1), 
	('AGENDA', 40, 2)

CREATE LOGIN ZE
WITH PASSWORD = 'abc123@'

SELECT *
FROM SYS.SERVER_PRINCIPALS

CREATE USER ZE
FROM LOGIN ZE

SELECT *
FROM SYS.DATABASE_PRINCIPALS

EXECUTE AS USER = 'ZE'

SELECT * 
FROM PRODUCAO.TIPO_PRODUTO

SELECT * 
FROM PRODUCAO.PRODUTO

REVERT

GRANT SELECT 
ON PRODUCAO.TIPO_PRODUTO
TO ZE

DENY SELECT
ON PRODUCAO.PRODUTO
TO ZE

GRANT SELECT 
ON PRODUCAO.PRODUTO (COD_PRODUTO, NOME_PRODUTO)
TO ZE

EXECUTE AS USER = 'ZE'

SELECT * 
FROM PRODUCAO.TIPO_PRODUTO

SELECT * 
FROM PRODUCAO.PRODUTO

SELECT COD_PRODUTO, 
	NOME_PRODUTO
FROM PRODUTO

REVERT

REVOKE SELECT 
ON PRODUCAO.PRODUTO
TO ZE

EXECUTE AS USER = 'ZE'

SELECT * 
FROM PRODUCAO.TIPO_PRODUTO

SELECT * 
FROM PRODUCAO.PRODUTO

SELECT COD_PRODUTO, 
	NOME_PRODUTO
FROM PRODUCAO.PRODUTO

REVERT

--GRANT/DENY SELECT
--ON SCHEMA::DBO
--TO ZE

--REVOKE SELECT 
--ON SCHEMA::DBO
--TO ZE

EXECUTE AS USER = 'ZE'

SELECT * 
FROM PRODUCAO.TIPO_PRODUTO

REVERT

REVOKE SELECT 
ON PRODUCAO.TIPO_PRODUTO
TO ZE

EXECUTE AS USER = 'ZE'

SELECT * 
FROM PRODUCAO.TIPO_PRODUTO

REVERT

GO

GRANT SELECT, INSERT, UPDATE, DELETE
ON SCHEMA::PRODUCAO
TO ZE

EXECUTE AS USER = 'ZE'

SELECT *
FROM PRODUCAO.TIPO_PRODUTO

REVERT

REVOKE SELECT
ON SCHEMA::PRODUCAO
TO ZE

EXECUTE AS USER = 'ZE'

SELECT *
FROM PRODUCAO.TIPO_PRODUTO

REVERT

REVOKE INSERT, UPDATE, DELETE
ON SCHEMA::PRODUCAO
TO ZE

GRANT SELECT 
ON PRODUCAO.PRODUTO
TO ZE 
WITH GRANT OPTION

CREATE LOGIN CHICO 
WITH PASSWORD = 'abc123@'

CREATE USER CHICO
FROM LOGIN CHICO

EXECUTE AS USER = 'ZE'

GRANT SELECT 
ON PRODUCAO.PRODUTO
TO CHICO

REVERT

EXECUTE AS USER = 'CHICO'

SELECT * 
FROM PRODUCAO.PRODUTO

REVERT

REVOKE SELECT
ON PRODUCAO.PRODUTO 
TO ZE
CASCADE

EXECUTE AS USER = 'CHICO'

SELECT * 
FROM PRODUCAO.PRODUTO

REVERT

GO

CREATE PROC PRODUCAO.USP_PRODUTO_SELECT
AS
	SELECT * 
	FROM PRODUTO
GO

GRANT EXEC
ON PRODUCAO.USP_PRODUTO_SELECT
TO ZE

EXECUTE AS USER = 'ZE'

EXEC PRODUCAO.USP_PRODUTO_SELECT

EXEC SP_HELP [PRODUCAO.USP_PRODUTO_SELECT]

EXEC SP_HELPTEXT [PRODUCAO.USP_PRODUTO_SELECT]

SELECT * 
FROM SYS.SYSCOMMENTS
WHERE ID = OBJECT_ID('PRODUCAO.USP_PRODUTO_SELECT')

REVERT

GRANT VIEW DEFINITION
ON PRODUCAO.USP_PRODUTO_SELECT
TO ZE

EXECUTE AS USER = 'ZE'

EXEC SP_HELPTEXT [PRODUCAO.USP_PRODUTO_SELECT]

SELECT * 
FROM SYS.SYSCOMMENTS
WHERE ID = OBJECT_ID('PRODUCAO.USP_PRODUTO_SELECT')

REVERT

GO

CREATE FUNCTION PRODUCAO.UDF_NOME_PRODUTO_POR_COD_PRODUTO
(
	@COD_PRODUTO INT
)
RETURNS VARCHAR(50)
AS
BEGIN
	RETURN 
	(
		SELECT NOME_PRODUTO
		FROM PRODUTO
		WHERE COD_PRODUTO = @COD_PRODUTO
	)
END
GO

SELECT PRODUCAO.UDF_NOME_PRODUTO_POR_COD_PRODUTO(1)

EXECUTE AS USER = 'ZE'

SELECT PRODUCAO.UDF_NOME_PRODUTO_POR_COD_PRODUTO(1)

REVERT

GRANT EXECUTE 
ON PRODUCAO.UDF_NOME_PRODUTO_POR_COD_PRODUTO
TO ZE

EXECUTE AS USER = 'ZE'

SELECT PRODUCAO.UDF_NOME_PRODUTO_POR_COD_PRODUTO(1)

REVERT

GO

CREATE FUNCTION PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO
(
	@NOME_TIPO_PRODUTO VARCHAR(50)
)
RETURNS TABLE
AS
	RETURN
	(
		SELECT P.COD_PRODUTO, 
			P.NOME_PRODUTO, 
			P.PRECO_PRODUTO
		FROM PRODUCAO.PRODUTO P
		JOIN PRODUCAO.TIPO_PRODUTO TP
			ON TP.COD_TIPO_PRODUTO = P.COD_TIPO_PRODUTO
		WHERE TP.NOME_TIPO_PRODUTO = @NOME_TIPO_PRODUTO 
	)
GO

SELECT * 
FROM PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO('FERRAMENTA')

EXECUTE AS USER = 'ZE'

SELECT * 
FROM PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO('FERRAMENTA')

REVERT

GRANT SELECT, VIEW DEFINITION
ON PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO
TO ZE

EXECUTE AS USER = 'ZE'

SELECT * 
FROM PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO('FERRAMENTA')

EXEC SP_HELPTEXT [PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO]

REVERT

DROP FUNCTION PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO

GO

CREATE FUNCTION PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO
(
	@NOME_TIPO_PRODUTO VARCHAR(50)
)
RETURNS @RETORNO TABLE(COD_PRODUTO INT, NOME_PRODUTO VARCHAR(50), PRECO_PRODUTO DEC(9,2))
AS
BEGIN
	INSERT @RETORNO 
	SELECT P.COD_PRODUTO, 
		P.NOME_PRODUTO, 
		P.PRECO_PRODUTO
	FROM PRODUCAO.PRODUTO P
	JOIN PRODUCAO.TIPO_PRODUTO TP
		ON TP.COD_TIPO_PRODUTO = P.COD_TIPO_PRODUTO
	WHERE TP.NOME_TIPO_PRODUTO = @NOME_TIPO_PRODUTO 
	
	RETURN
END
GO

GRANT SELECT 
ON PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO
TO ZE

EXECUTE AS USER = 'ZE'

SELECT * 
FROM PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO('MATERIAL DE ESCRITÓRIO')

EXEC SP_HELPTEXT [PRODUCAO.UDF_PRODUTOS_POR_NOME_TIPO_PRODUTO]

REVERT

--CLR COMMON LANGUAGE RUNTIME
--C#, VB.NET
--2.0 - 3.5

GO

--CREATE FUNCTION UDF_RANDOM()
--RETURNS INT
--AS
--BEGIN
--	RETURN 
--	(
--		SELECT CONVERT(INT, RAND()*10) + 1 AS 'ENTRE 1 E 10'
--	)
--END

GO

CREATE VIEW UV_RANDOM
AS
	SELECT CONVERT(INT, RAND()*10) + 1 AS 'ENTRE 1 E 10'
GO

SELECT * 
FROM UV_RANDOM

GO

CREATE FUNCTION UDF_RANDOM()
RETURNS INT
AS
BEGIN
	RETURN 
	(
		SELECT *
		FROM UV_RANDOM
	)
END
GO

SELECT DBO.UDF_RANDOM() AS 'ENTRE 1 E 10'

--ACRESCENTAR OS CLR AQUI!!!

SELECT * 
FROM SYS.SCHEMAS

GO
--http://msdn.microsoft.com/en-us/library/ms177450(v=sql.105).aspx
CREATE FUNCTION dbo.ImplyingPermissions (@class nvarchar(64), @permname nvarchar(64))
RETURNS @ImplPerms table (permname nvarchar(64), 
   class nvarchar(64), height int, rank int)
AS
BEGIN
   WITH 
   class_hierarchy(class_desc, parent_class_desc)
   AS
   (
   SELECT DISTINCT class_desc, parent_class_desc 
      FROM sys.fn_builtin_permissions('')
   ),
   PermT(class_desc, permission_name, covering_permission_name,
      parent_covering_permission_name, parent_class_desc)
   AS
   (
   SELECT class_desc, permission_name, covering_permission_name,
      parent_covering_permission_name, parent_class_desc
      FROM sys.fn_builtin_permissions('')
   ),
   permission_covers(permission_name, class_desc, level,
      inserted_as)
   AS
    (
    SELECT permission_name, class_desc, 0, 0
       FROM PermT
       WHERE permission_name = @permname AND
       class_desc = @class
    UNION ALL
    SELECT covering_permission_name, class_desc, 0, 1
       FROM PermT 
       WHERE class_desc = @class AND 
          permission_name = @permname AND
          len(covering_permission_name) > 0
    UNION ALL
    SELECT PermT.covering_permission_name, 
       PermT.class_desc, permission_covers.level,
       permission_covers.inserted_as + 1
       FROM PermT, permission_covers WHERE
       permission_covers.permission_name =
       PermT.permission_name AND
       permission_covers.class_desc = PermT.class_desc 
       AND len(PermT.covering_permission_name) > 0
    UNION ALL
    SELECT PermT.parent_covering_permission_name,
       PermT.parent_class_desc,
       permission_covers.level + 1,
       permission_covers.inserted_as + 1
       FROM PermT, permission_covers, class_hierarchy
       WHERE permission_covers.permission_name =
       PermT.permission_name AND 
       permission_covers.class_desc = PermT.class_desc
       AND permission_covers.class_desc = class_hierarchy.class_desc
       AND class_hierarchy.parent_class_desc =
       PermT.parent_class_desc AND
       len(PermT.parent_covering_permission_name) > 0
    )
  INSERT @ImplPerms
  SELECT DISTINCT permission_name, class_desc, 
     level, max(inserted_as) AS mia 
     FROM permission_covers
     GROUP BY class_desc, permission_name, level
     ORDER BY level, mia
  RETURN
END

SELECT * 
FROM dbo.ImplyingPermissions('schema', 'alter')

SELECT * 
FROM dbo.ImplyingPermissions('object', 'view definition') 

SELECT * 
FROM dbo.ImplyingPermissions('xml schema collection', 'execute')

